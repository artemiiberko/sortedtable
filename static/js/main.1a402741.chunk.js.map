{"version":3,"sources":["components/CarTable.js","components/Actions.js","App.js","reportWebVitals.js","index.js"],"names":["CarTable","props","data","selectRow","mode","clickToSelect","onSelect","onSelectRow","hideSelectColumn","bgColor","hover","striped","isKey","dataField","width","dataAlign","headerAlign","Actions","useState","show","setShow","handleClose","_id","Math","max","map","e","brand","model","year","newCarValue","setNewCarValue","onCarChange","idPlus","target","name","value","prevState","ButtonToolbar","className","Button","variant","onClick","deleteCar","Modal","onHide","Header","closeButton","Title","Body","Form","Group","Label","Control","type","placeholder","onChange","Footer","addCar","cars","App","searchValue","setSearchValue","changeCars","setChangeCars","search","filteredData","filter","car","toLowerCase","includes","comparebybrand","a","b","comparebymodel","comparebyyear","sortedData","selectedRows","setSelectedRows","Container","Row","style","padding","background","Col","selected_rows","selected_row","length","InputGroup","FormControl","marginBottom","marginTop","lg","sort","row","isSelected","item","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1a402741.chunk.js","sourcesContent":["import { BootstrapTable, TableHeaderColumn } from \"react-bootstrap-table\"\r\nimport \"../../node_modules/react-bootstrap-table/css/react-bootstrap-table.css\"\r\n\r\nconst CarTable = (props) => {\r\n  return (\r\n    <div>\r\n      <BootstrapTable\r\n        data={props.data}\r\n        selectRow={{\r\n          mode: \"checkbox\",\r\n          clickToSelect: true,\r\n          onSelect: props.onSelectRow,\r\n          hideSelectColumn: true,\r\n          bgColor: \"#F04545\",\r\n        }}\r\n        hover\r\n        striped\r\n      >\r\n        <TableHeaderColumn isKey dataField=\"_id\" width=\"0%\">\r\n          ID\r\n        </TableHeaderColumn>\r\n        <TableHeaderColumn\r\n          dataField=\"brand\"\r\n          dataAlign=\"center\"\r\n          headerAlign=\"center\"\r\n          width=\"41.75%\"\r\n        >\r\n          Marka pojazdu\r\n        </TableHeaderColumn>\r\n        <TableHeaderColumn\r\n          dataField=\"model\"\r\n          dataAlign=\"center\"\r\n          headerAlign=\"center\"\r\n          width=\"41.75%\"\r\n        >\r\n          Model pojazdu\r\n        </TableHeaderColumn>\r\n        <TableHeaderColumn\r\n          dataField=\"year\"\r\n          dataAlign=\"center\"\r\n          headerAlign=\"center\"\r\n          width=\"16.5%\"\r\n        >\r\n          Rok produkcji\r\n        </TableHeaderColumn>\r\n      </BootstrapTable>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CarTable\r\n","import { ButtonToolbar, Button, Modal, Form } from \"react-bootstrap\"\r\nimport { useState } from \"react\"\r\n\r\nvar Actions = (props) => {\r\n  const [show, setShow] = useState(false)\r\n  const handleClose = () => setShow(false)\r\n  const handleShow = () => setShow(true)\r\n\r\n  const [newCarValue, setNewCarValue] = useState({\r\n    _id: Math.max(...props.data.map((e) => e._id)),\r\n    brand: \"\",\r\n    model: \"\",\r\n    year: 2020,\r\n  })\r\n  const onCarChange = (e) => {\r\n    var idPlus = Math.max(...props.data.map((e) => e._id))\r\n    idPlus++\r\n    const { name, value } = e.target\r\n    setNewCarValue((prevState) => ({\r\n      ...prevState,\r\n      [name]: value,\r\n      _id: idPlus,\r\n    }))\r\n  }\r\n  const handleSubmit = (e) => {\r\n    if (\r\n      (newCarValue.brand !== \"\") &\r\n      (newCarValue.model !== \"\") &\r\n      (newCarValue.year !== \"\")\r\n    ) {\r\n      props.addCar(newCarValue)\r\n      setShow(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <ButtonToolbar className=\"justify-content-around\">\r\n        <Button variant=\"danger\" onClick={props.deleteCar}>\r\n          Delete\r\n        </Button>\r\n        <Button variant=\"dark\" onClick={handleShow}>\r\n          + Add new car\r\n        </Button>\r\n      </ButtonToolbar>\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Add new car</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form.Group className=\"mb-3\">\r\n            <Form.Label>Brand</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"Brand\"\r\n              onChange={onCarChange}\r\n              value={newCarValue.brand}\r\n              name=\"brand\"\r\n            />\r\n          </Form.Group>\r\n          <Form.Group className=\"mb-3\">\r\n            <Form.Label>Model</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"Model\"\r\n              onChange={onCarChange}\r\n              value={newCarValue.model}\r\n              name=\"model\"\r\n            />\r\n          </Form.Group>\r\n          <Form.Group className=\"mb-3\">\r\n            <Form.Label>Production year</Form.Label>\r\n            <Form.Control\r\n              type=\"number\"\r\n              placeholder=\"Year\"\r\n              onChange={onCarChange}\r\n              value={newCarValue.year}\r\n              name=\"year\"\r\n            />\r\n          </Form.Group>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={handleSubmit}>\r\n            Add\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Actions\r\n","import { useState } from \"react\"\nimport {\n  Container,\n  Row,\n  FormControl,\n  InputGroup,\n  Col,\n  Button,\n} from \"react-bootstrap\"\nimport CarTable from \"./components/CarTable\"\nimport Actions from \"./components/Actions\"\n\nimport \"./App.css\"\n\nconst cars = [\n  { _id: 1, brand: \"BMW\", model: \"X5\", year: 2020 },\n  { _id: 2, brand: \"Tesla\", model: \"Model S\", year: 2021 },\n  { _id: 3, brand: \"Toyota\", model: \"Land Cruiser\", year: 2017 },\n  { _id: 4, brand: \"Audi\", model: \"TT\", year: 2018 },\n  { _id: 5, brand: \"Ford\", model: \"F-150\", year: 2015 },\n]\n\nfunction App(props) {\n  const [searchValue, setSearchValue] = useState(\"\")\n  const [changeCars, setChangeCars] = useState(cars)\n  const onSearchChange = (e) => setSearchValue(e.target.value)\n  var search = searchValue\n  var filteredData = changeCars.filter((car) =>\n    car.model.toLowerCase().includes(search.toLowerCase())\n  )\n\n  function comparebybrand(a, b) {\n    if (a.brand < b.brand) {\n      return -1\n    }\n    if (a.brand > b.brand) {\n      return 1\n    }\n    return 0\n  }\n\n  function comparebymodel(a, b) {\n    if (a.model < b.model) {\n      return -1\n    }\n    if (a.model > b.model) {\n      return 1\n    }\n    return 0\n  }\n\n  function comparebyyear(a, b) {\n    if (a.year > b.year) {\n      return -1\n    }\n    if (a.year < b.year) {\n      return 1\n    }\n    return 0\n  }\n  var sortedData = filteredData\n  const sortbybrand = () => {\n    setChangeCars(filteredData.sort(comparebybrand))\n  }\n  const sortbymodel = () => {\n    setChangeCars(filteredData.sort(comparebymodel))\n  }\n  const sortbyyear = () => {\n    setChangeCars(filteredData.sort(comparebyyear))\n  }\n\n  const addCar = (car) => {\n    setChangeCars((prevState) => [...prevState, car])\n  }\n  const deleteCar = () => {\n    var selected_rows = selectedRows\n    setChangeCars((changeCars) =>\n      changeCars.filter(function (car) {\n        return (\n          selected_rows.filter(function (selected_row) {\n            return selected_row._id === car._id\n          }).length === 0\n        )\n      })\n    )\n  }\n  const [selectedRows, setSelectedRows] = useState([])\n  function onSelectRow(row, isSelected, e) {\n    if (isSelected) {\n      setSelectedRows((prevState) => [...prevState, { _id: row._id }])\n    } else {\n      setSelectedRows(selectedRows.filter((item) => item._id !== row._id))\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <Row style={{ padding: 20, background: \"#ebebeb\" }}>\n          <Col>\n            <Actions addCar={addCar} data={changeCars} deleteCar={deleteCar} />\n          </Col>\n          <Col>\n            <InputGroup>\n              <FormControl\n                type=\"text\"\n                placeholder=\"Search model\"\n                onChange={onSearchChange}\n                value={searchValue}\n              />\n            </InputGroup>\n          </Col>\n        </Row>\n        <Row style={{ marginBottom: 10, marginTop: 10 }}>\n          <Col lg=\"5\">\n            <Button variant=\"light\" onClick={sortbybrand}>\n              Sort by brand\n            </Button>\n          </Col>\n          <Col lg=\"5\">\n            <Button variant=\"light\" onClick={sortbymodel}>\n              Sort by model\n            </Button>\n          </Col>\n          <Col lg=\"2\">\n            <Button variant=\"light\" onClick={sortbyyear}>\n              Sort by year\n            </Button>\n          </Col>\n        </Row>\n        <Row>\n          <CarTable data={sortedData} onSelectRow={onSelectRow} />\n        </Row>\n      </Container>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\n// import { MongoClient } from \"mongodb\"\n\n// const MongoClient = require(\"mongodb\").MongoClient\n\n// const uri =\n//   \"mongodb+srv://ada:ada@cluster0.tvhjm.mongodb.net/ada?retryWrites=true&w=majority\"\n\n// const client = new MongoClient(uri, {\n//   useNewUrlParser: true,\n//   useUnifiedTopology: true,\n// })\n\n// async function run() {\n//   try {\n//     console.log(\"do\")\n//     await client.connect()\n//     console.log(\"po\")\n//     const coll = client.db(\"cars\").collection(\"cars\")\n//     const cursor = coll.find()\n//     await cursor.forEach(console.dir)\n//   } finally {\n//     await client.close()\n//   }\n// }\n\n// run().catch(console.dir)\n// const cars = client.db().collection(\"cars\")\n// console.log(cars)\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}